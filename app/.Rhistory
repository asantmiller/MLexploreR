source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time"))
names(full_data)
str(full_data)
t <- as.Date(full_data[["depart_date_time"]])
t <- mdy(full_data[["depart_date_time"]])
t <- as.POSIXct(full_data[["depart_date_time"]])
t <- as_datetime(full_data[["depart_date_time"]])
full_data[["depart_date_time"]][1:10]
full_data[["depart_date_time"]][1:10] %>% gsub(pattern = "[/:]", replacement = "-", x = .) %>% as_datetime() %>% summary()
full_data[["depart_date_time"]][1:10] %>% gsub(pattern = "[/:]", replacement = "-", x = .)
full_data[["depart_date_time"]][1:10] %>% gsub(pattern = "/", replacement = "-", x = .)
full_data[["depart_date_time"]][1:10] %>% gsub(pattern = "/", replacement = "-", x = .) as_datetime()
full_data[["depart_date_time"]][1:10] %>% gsub(pattern = "/", replacement = "-", x = .) %>%as_datetime()
as.POSIXct(strptime("9/15/2015 5:53:00", "%m/%d/%Y %H:%M:%S"))
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time"))
summary(full_data[["depart_date_time"]])
full_data[["depart_date_time"]] %>% strptime(., "%m/%d/%Y %H:%M:%S") %>% as.POSIXct() %>% summary()
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = ., outcomes = c("travel_days", "travel_hours")) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = ., outcomes = c("travel_days", "travel_hours"))
summary(full_data)
full_data %>%
filter(!is.na(travel_hours)) %>%
filter(!is.na(travel_days)) %>%
summary()
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = ., outcomes = c("travel_days", "travel_hours")) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
train_test <- full_data[["build"]]
holdout <- full_data[["holdout"]]
summary(train_test)
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
train_test <- full_data[["build"]]
holdout <- full_data[["holdout"]]
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
train_test <- full_data[["build"]]
holdout <- full_data[["holdout"]]
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
train_test <- full_data[["build"]]
holdout <- full_data[["holdout"]]
traceback()
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
names(full_data[[1]])
full_data[[1]] %>%
head(full_data[[1]])
full_data[[1]] %>%
select(depart_lattitude, depart_longitude, arrival_lattitude, arrival_longitude) %>% head()
full_data[[1]] %>% dplyr::select(depart_lattitude, depart_longitude, arrival_lattitude, arrival_longitude) %>% head()
distGeo(p1 = c(51.3, 25.1), p2 = c(54, 17.7))
distCosine(p1 = c(51.3, 25.1), p2 = c(54, 17.7))
generate_distance_features <- function(df) {
df %>%
dplyr::mutate(.,
great_circle_distance = distCosine(p1 = c(depart_longitude, depart_lattitude),
p2 = c(arrival_longitude, arrival_latitude)))
# ellipsoid_distance = distGeo(p1 = c(depart_longitude, depart_lattitude),
#                              p2 = c(arrival_longitude, arrival_latitude)),
# haversine_distance = distHaversine(p1 = c(depart_longitude, depart_lattitude),
#                                    p2 = c(arrival_longitude, arrival_latitude)),
# meeus_distance = distMeeus(p1 = c(depart_longitude, depart_lattitude),
#                            p2 = c(arrival_longitude, arrival_latitude)),
# rhumb_distance = distRhumb(p1 = c(depart_longitude, depart_lattitude),
#                            p2 = c(arrival_longitude, arrival_latitude)),
# vincenty_ellipsoid_distance = distVincentyEllipsoid(p1 = c(depart_longitude, depart_lattitude),
#                                                     p2 = c(arrival_longitude, arrival_latitude)),
# vincenty_sphere_distance = distVincentySphere(p1 = c(depart_longitude, depart_lattitude),
#                                               p2 = c(arrival_longitude, arrival_latitude)))
}
generate_distance_features(df = full_data[[1]])
generate_distance_features <- function(df) {
df %>%
dplyr::mutate(.,
great_circle_distance = distCosine(p1 = cbind(depart_longitude, depart_lattitude),
p2 = cbind(arrival_longitude, arrival_latitude)))
# ellipsoid_distance = distGeo(p1 = c(depart_longitude, depart_lattitude),
#                              p2 = c(arrival_longitude, arrival_latitude)),
# haversine_distance = distHaversine(p1 = c(depart_longitude, depart_lattitude),
#                                    p2 = c(arrival_longitude, arrival_latitude)),
# meeus_distance = distMeeus(p1 = c(depart_longitude, depart_lattitude),
#                            p2 = c(arrival_longitude, arrival_latitude)),
# rhumb_distance = distRhumb(p1 = c(depart_longitude, depart_lattitude),
#                            p2 = c(arrival_longitude, arrival_latitude)),
# vincenty_ellipsoid_distance = distVincentyEllipsoid(p1 = c(depart_longitude, depart_lattitude),
#                                                     p2 = c(arrival_longitude, arrival_latitude)),
# vincenty_sphere_distance = distVincentySphere(p1 = c(depart_longitude, depart_lattitude),
#                                               p2 = c(arrival_longitude, arrival_latitude)))
}
generate_distance_features(df = full_data[[1]])
# Load source code --------------------------------------------------------
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/global_params.R")
source("/Users/aaronsantmiller/Desktop/dev/cargovignette3/method_exploration/asm/src/function_base.R")
install_packages(package_vector = package_list)
# Load data for analysis - split accordingly ------------------------------
full_data <- load_big_tibble(path_to_folder = data_path,
features = c("first_mission_id", "air_mission_id", "air_mission_type",
"mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type", "tcn_weight",
"tcn_volume", "tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_country_code", "depart_lattitude",
"depart_longitude", "depart_theater", "arrival_country_code",
"arrival_lattitude", "arrival_longitude", "arrival_theater",
"depart_date_time", "arrival_date_time")) %>%
format_feature_types(df = .) %>%
filter_missing_outcomes(df = .) %>%
generate_distance_features(df = .) %>%
create_holdout(df = .,
split_approach = "balanced",
target_variable = "travel_hours")
train_test <- full_data[["build"]]
holdout <- full_data[["holdout"]]
names(train_test)
summary(train_test)
model_choices <- c("lm")
model_performances <- df %>%
na.omit() %>%
test_modeling_approaches(df = .,
outcome = "travel_days",
predictors = c("air_mission_type", "mission_priority",
"pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type",
"tcn_weight", "tcn_volume", "tcn_weight / tcn_volume",
"tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_theater", "arrival_theater",
"great_circle_distance"),
training_method = "cv",
k = 10,
model_vector = model_choices,
parallel = FALSE)
model_performances <- train_test %>%
na.omit() %>%
test_modeling_approaches(df = .,
outcome = "travel_days",
predictors = c("air_mission_type", "mission_priority",
"pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type",
"tcn_weight", "tcn_volume", "tcn_weight / tcn_volume",
"tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_theater", "arrival_theater",
"great_circle_distance"),
training_method = "cv",
k = 10,
model_vector = model_choices,
parallel = FALSE)
model_performances
model_choices <- c("lm")
model_performances <- train_test %>%
na.omit() %>%
test_modeling_approaches(df = .,
outcome = "travel_days",
predictors = c("mission_priority", "pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type",
"tcn_weight", "tcn_volume", "great_circle_distance"),
training_method = "cv",
k = 10,
model_vector = model_choices,
parallel = FALSE)
model_performances
model_choices <- c("earth", "lm", "rf", "bridge", "ridge", "lasso", "bayesglm",
"gam", "gbm_h2o", "mlp", "nnet", "svmRadial")
model_performances <- train_test %>%
na.omit() %>%
test_modeling_approaches(df = .,
outcome = "travel_days",
predictors = c("air_mission_type", "mission_priority",
"pallet_gross_weight", "pallet_height",
"pallet_configuration_type", "pallet_module_type",
"tcn_weight", "tcn_volume", "tcn_weight / tcn_volume",
"tcn_commodity_code", "tcn_transportation_priority",
"tcn_piece_quantity", "depart_theater", "arrival_theater",
"great_circle_distance"),
training_method = "cv",
k = 10,
model_vector = model_choices,
parallel = FALSE)
model_performances
rm()
gc()
install_packages <- function(package_vector) {
# This function helps install packages in a loop to ensure the user
# isn't missing critical dependencies
new_packages <- package_vector[!(package_vector %in% installed.packages()[, "Package"])]
if (length(new_packages)) {
install.packages(new_packages, dependencies = TRUE)
}
sapply(package_vector, require, character.only = TRUE)
}
test <- c(1,2,3)
str(test)
str(test) == "numeric"
typeof(test) == "numeric"
typeof(test) == "num"
typeof(test)
typeof(test) == "double"
shiny::runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
div(
style='padding: 0px;',
width = 12,
column(
width = 4,
box(
style ='padding: 0px;',
title = "Import Data",
width = 12,
collapsible = T,
solidHeader = T,
column(width = 12,
ui_elements[["data_import"]],
ui_elements[["import_button"]],
style = 'padding: 10px;'
)
)
),
column(
width = 8,
fluidRow()
)
)
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
ui_elements[["import_button"]] <- div(
tags$head(
tags$style(HTML('#import_data{background-color:indianred}'))
),
actionButton("import_data",
"Import File")
)
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
div(
style='padding: 0px;',
width = 12,
# Left hand column for data importing and quick summaries
column(
width = 4,
box(
style ='padding: 0px;',
title = "Import Data",
width = 12,
collapsible = T,
solidHeader = T,
column(width = 12,
fluidRow(
# File selection element
ui_elements[["data_import"]],
hr(),
# Import submit button - triggers the data upload
column(
width = 12,
align = "right",
ui_elements[["import_button"]]
)
),
style = 'padding: 10px;'
)
)
),
# Right hand column for data visualizations of uploaded data and summary measures
column(
width = 8,
fluidRow()
)
)
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
ryCatch({
df <- read_csv(input$imported_data$datapath)
},
error = function(e) {
# Return a safeError if a parsing error occurs
stop(
safeError(e)
)
}
)
tryCatch({
df <- read_csv(input$imported_data$datapath)
},
error = function(e) {
# Return a safeError if a parsing error occurs
stop(
safeError(e)
)
}
)
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
runApp('Desktop/dev/evaluatoR/app')
tryCatch({
df <- read_csv(input$imported_data$datapath)
},
error = function(e) {
# Return a safeError if a parsing error occurs
stop(
safeError(e)
)
}
)
shiny::runApp('Desktop/dev/evaluatoR/app')
